apply plugin: 'java'
apply plugin: 'war'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

// Version //
ext.versionFile = file('version.properties')

task loadVersion(group: 'versioning') {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet('Reading the version file')

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit ${versionFile.canonicalPath}")
    }

    Properties versionProps = new Properties();

    versionFile.withInputStream { stream -> versionProps.load(stream) }
    new ProjectVersion(
            versionProps.major.toInteger(),
            versionProps.minor.toInteger(),
            versionProps.release.toBoolean()
    )
}

class ProjectVersion {
    Integer major;
    Integer minor;
    boolean release;

    ProjectVersion(Integer major, Integer minor) {
        this(major, minor, Boolean.FALSE)
    }

    ProjectVersion(Integer major, Integer minor, boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    @Override
    public String toString() {
        return "$major.$minor${release ? '' : '-SNAPSHOT'}";
    }
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version (CustomTask).'
    }

    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

// Source //
sourceCompatibility = 1.8

// Packaging //
jar {
    manifest {
        attributes 'Main-Class': 'org.arthan.todo.ToDoApp'
    }
}

war {
    archiveName 'todoApp.war'
}

gretty {
    port = 9099
    contextPath = '/todo'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    runtime 'javax.servlet:jstl:1.2'
}

task kkk << {
    setDescription("My test project")
    println "Project ${name} description: ${getDescription()}"
}
kkk.dependsOn('printVersion')

task printVersion {
    doFirst {
        println "Before reading the project version"
    }
    doLast {
        logger.quiet("Version: ${version}")
    }
}
printVersion.doFirst { println "First action" }
printVersion << { println "Last action" }

task('makeReleaseVersion', type: ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

// Releasing
task ('release', dependsOn: backupReleaseDistribution) << {
    logger.quiet("Releasing the project...")
}